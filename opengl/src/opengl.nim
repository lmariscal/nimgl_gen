# Copyright 2018, NimGL contributors.

import os, strutils, httpclient, streams, xmlparser, xmltree, figures

when not isMainModule:
  echo "use nimgl's opengl generator as a cli command."
  quit(-1)

type
  Argument = tuple[ptype: string, name: string]
  Command = object
    rtn: string
    name: string
    arguments: seq[Argument]

const
  header = """
# Copyright 2018, NimGL contributors.

import nimgl/glfw # used to get the glfwGetProcAddress procedure

## OpenGL Bindings
## ===
##
## This code was automatically generated by nimgl_gen<https://github.com/lmariscal/nimgl_gen>`_
## with the opengl generator.

type
  GLvoid*           = pointer
  GLeglImageOES*    = distinct pointer
  GLsync*           = distinct pointer
  ClContext*        = distinct pointer
  ClEvent*          = distinct pointer
  GLbyte*           = int8
  GLshort*          = int16
  GLintptr*         = int
  GLintptrARB*      = int
  GLsizeiptr*       = int
  GLsizeiptrARB*    = int
  GLclampx*         = int32
  GLfixed*          = int32
  GLint*            = int32
  GLsizei*          = int32
  GLvdpauSurfaceNV* = int32
  GLint64*          = int64
  GLint64EXT*       = int64
  GLubyte*          = uint8
  GLhalf*           = uint16
  GLhalfARB*        = uint16
  GLhalfNV*         = uint16
  GLushort*         = uint16
  GLbitfield*       = uint32
  GLhandleARB*      = uint32
  GLenum*           = uint32
  GLuint*           = uint32
  GLuint64*         = uint64
  GLuint64EXT*      = uint64
  GLboolean*        = bool
  GLchar*           = char
  GLcharARB*        = byte
  GLclampf*         = float32
  GLfloat*          = float32
  GLclampd*         = float64
  GLdouble*         = float64

var
"""
  footer = """

proc glInit*(loader: proc = getProcAddress) =
  echo "init"
"""

# TODO: remove the compatibility mode stuff from the generator ```<remove profile="core" comment="Compatibility-only GL 1.0 features removed from GL 3.2">``.
# TODO: make the loader for all the procs
# TODO: maybe separate them between versions for loading time

proc getRegistry() =
  ## downloads the xml opengl registry
  let client  = newHttpClient()
  echo figures.pointer & " Downloading OpenGL Registry.."
  client.downloadFile("https://raw.githubusercontent.com/KhronosGroup/OpenGL-Registry/master/xml/gl.xml", "gl.xml")

proc newCommand(): Command =
  result.name      = ""
  result.rtn       = ""
  result.arguments = @[]

proc toProc(cmd: Command): string =
  result = "  " & cmd.name & "*: proc ("
  for i in cmd.arguments:
    result.add(i.name & ": " & i.ptype & ", ")
  if cmd.arguments.len > 0:
    result = result.substr(0, result.len - 3)
  result.add("): " & cmd.rtn & "{.cdecl.}\n")

proc main() =
  if not fileExists("gl.xml"):
    getRegistry()
    echo figures.tick & " Done!"

  var
    file = newFileStream("gl.xml", fmRead)
    outCode = ""

  outCode.add(header)

  for i in file.parseXml.findAll("command"):
    var cmd  = newCommand()

    if i.child("proto") == nil: continue
    cmd.name = i.child("proto").child("name").innerText
    cmd.rtn  = i.child("proto").innerText
    cmd.rtn  = cmd.rtn.substr(0, cmd.rtn.len - cmd.name.len - 1)
    if cmd.rtn.endsWith(" "):
      cmd.rtn = cmd.rtn.substr(0, cmd.rtn.len - 2)

    for p in i.findAll("param"):
      var arg: Argument
      arg.name  = p.child("name").innerText
      arg.ptype = p.innerText
      arg.ptype = arg.ptype.substr(0, arg.ptype.len - arg.name.len - 1)
      if arg.ptype.endsWith(" "):
        arg.ptype = arg.ptype.substr(0, arg.ptype.len - 2)
      cmd.arguments.add(arg)

    outCode.add(cmd.toProc())

  outCode.add(footer)
  writeFile("gl.nim", outCode)

main()
